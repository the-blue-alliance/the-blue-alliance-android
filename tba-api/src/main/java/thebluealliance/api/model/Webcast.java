/*
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.9.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package thebluealliance.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Webcast
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-12T10:04:04.013721-06:00[America/Chicago]", comments = "Generator version: 7.10.0")
public class Webcast {
  /**
   * Type of webcast, typically descriptive of the streaming provider.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    YOUTUBE(String.valueOf("youtube")),
    
    TWITCH(String.valueOf("twitch")),
    
    USTREAM(String.valueOf("ustream")),
    
    IFRAME(String.valueOf("iframe")),
    
    HTML5(String.valueOf("html5")),
    
    RTMP(String.valueOf("rtmp")),
    
    LIVESTREAM(String.valueOf("livestream")),
    
    DIRECT_LINK(String.valueOf("direct_link")),
    
    MMS(String.valueOf("mms")),
    
    JUSTIN(String.valueOf("justin")),
    
    STEMTV(String.valueOf("stemtv")),
    
    DACAST(String.valueOf("dacast"));

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nonnull
  private TypeEnum type;

  public static final String SERIALIZED_NAME_CHANNEL = "channel";
  @SerializedName(SERIALIZED_NAME_CHANNEL)
  @javax.annotation.Nonnull
  private String channel;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  @javax.annotation.Nullable
  private String date;

  public static final String SERIALIZED_NAME_FILE = "file";
  @SerializedName(SERIALIZED_NAME_FILE)
  @javax.annotation.Nullable
  private String _file;

  public Webcast() {
  }

  public Webcast type(@javax.annotation.Nonnull TypeEnum type) {
    
    this.type = type;
    return this;
  }

  /**
   * Type of webcast, typically descriptive of the streaming provider.
   * @return type
   */
  @javax.annotation.Nonnull

  public TypeEnum getType() {
    return type;
  }


  public void setType(@javax.annotation.Nonnull TypeEnum type) {
    this.type = type;
  }

  public Webcast channel(@javax.annotation.Nonnull String channel) {
    
    this.channel = channel;
    return this;
  }

  /**
   * Type specific channel information. May be the YouTube stream, or Twitch channel name. In the case of iframe types, contains HTML to embed the stream in an HTML iframe.
   * @return channel
   */
  @javax.annotation.Nonnull

  public String getChannel() {
    return channel;
  }


  public void setChannel(@javax.annotation.Nonnull String channel) {
    this.channel = channel;
  }

  public Webcast date(@javax.annotation.Nullable String date) {
    
    this.date = date;
    return this;
  }

  /**
   * The date for the webcast in &#x60;yyyy-mm-dd&#x60; format. May be null.
   * @return date
   */
  @javax.annotation.Nullable

  public String getDate() {
    return date;
  }


  public void setDate(@javax.annotation.Nullable String date) {
    this.date = date;
  }

  public Webcast _file(@javax.annotation.Nullable String _file) {
    
    this._file = _file;
    return this;
  }

  /**
   * File identification as may be required for some types. May be null.
   * @return _file
   */
  @javax.annotation.Nullable

  public String getFile() {
    return _file;
  }


  public void setFile(@javax.annotation.Nullable String _file) {
    this._file = _file;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Webcast webcast = (Webcast) o;
    return Objects.equals(this.type, webcast.type) &&
        Objects.equals(this.channel, webcast.channel) &&
        Objects.equals(this.date, webcast.date) &&
        Objects.equals(this._file, webcast._file);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, channel, date, _file);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Webcast {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    _file: ").append(toIndentedString(_file)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

