/*
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.9.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package thebluealliance.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import thebluealliance.api.model.LeaderboardInsightDataRankingsInner;

/**
 * LeaderboardInsightData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-12T10:04:04.013721-06:00[America/Chicago]", comments = "Generator version: 7.10.0")
public class LeaderboardInsightData {
  public static final String SERIALIZED_NAME_RANKINGS = "rankings";
  @SerializedName(SERIALIZED_NAME_RANKINGS)
  @javax.annotation.Nonnull
  private List<LeaderboardInsightDataRankingsInner> rankings = new ArrayList<>();

  /**
   * What type of key is used in the rankings; either &#39;team&#39;, &#39;event&#39;, or &#39;match&#39;.
   */
  @JsonAdapter(KeyTypeEnum.Adapter.class)
  public enum KeyTypeEnum {
    TEAM(String.valueOf("team")),
    
    EVENT(String.valueOf("event")),
    
    MATCH(String.valueOf("match"));

    private String value;

    KeyTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KeyTypeEnum fromValue(String value) {
      for (KeyTypeEnum b : KeyTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KeyTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KeyTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KeyTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KeyTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_KEY_TYPE = "key_type";
  @SerializedName(SERIALIZED_NAME_KEY_TYPE)
  @javax.annotation.Nonnull
  private KeyTypeEnum keyType;

  public LeaderboardInsightData() {
  }

  public LeaderboardInsightData rankings(@javax.annotation.Nonnull List<LeaderboardInsightDataRankingsInner> rankings) {
    
    this.rankings = rankings;
    return this;
  }

  public LeaderboardInsightData addRankingsItem(LeaderboardInsightDataRankingsInner rankingsItem) {
    if (this.rankings == null) {
      this.rankings = new ArrayList<>();
    }
    this.rankings.add(rankingsItem);
    return this;
  }

  /**
   * Get rankings
   * @return rankings
   */
  @javax.annotation.Nonnull

  public List<LeaderboardInsightDataRankingsInner> getRankings() {
    return rankings;
  }


  public void setRankings(@javax.annotation.Nonnull List<LeaderboardInsightDataRankingsInner> rankings) {
    this.rankings = rankings;
  }

  public LeaderboardInsightData keyType(@javax.annotation.Nonnull KeyTypeEnum keyType) {
    
    this.keyType = keyType;
    return this;
  }

  /**
   * What type of key is used in the rankings; either &#39;team&#39;, &#39;event&#39;, or &#39;match&#39;.
   * @return keyType
   */
  @javax.annotation.Nonnull

  public KeyTypeEnum getKeyType() {
    return keyType;
  }


  public void setKeyType(@javax.annotation.Nonnull KeyTypeEnum keyType) {
    this.keyType = keyType;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LeaderboardInsightData leaderboardInsightData = (LeaderboardInsightData) o;
    return Objects.equals(this.rankings, leaderboardInsightData.rankings) &&
        Objects.equals(this.keyType, leaderboardInsightData.keyType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rankings, keyType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LeaderboardInsightData {\n");
    sb.append("    rankings: ").append(toIndentedString(rankings)).append("\n");
    sb.append("    keyType: ").append(toIndentedString(keyType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

