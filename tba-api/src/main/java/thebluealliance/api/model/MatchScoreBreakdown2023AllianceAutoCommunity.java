/*
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.9.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package thebluealliance.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * MatchScoreBreakdown2023AllianceAutoCommunity
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-12T10:04:04.013721-06:00[America/Chicago]", comments = "Generator version: 7.10.0")
public class MatchScoreBreakdown2023AllianceAutoCommunity {
  /**
   * Gets or Sets B
   */
  @JsonAdapter(BEnum.Adapter.class)
  public enum BEnum {
    NONE(String.valueOf("None")),
    
    CONE(String.valueOf("Cone")),
    
    CUBE(String.valueOf("Cube"));

    private String value;

    BEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BEnum fromValue(String value) {
      for (BEnum b : BEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_B = "B";
  @SerializedName(SERIALIZED_NAME_B)
  @javax.annotation.Nonnull
  private List<BEnum> B = new ArrayList<>();

  /**
   * Gets or Sets M
   */
  @JsonAdapter(MEnum.Adapter.class)
  public enum MEnum {
    NONE(String.valueOf("None")),
    
    CONE(String.valueOf("Cone")),
    
    CUBE(String.valueOf("Cube"));

    private String value;

    MEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MEnum fromValue(String value) {
      for (MEnum b : MEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_M = "M";
  @SerializedName(SERIALIZED_NAME_M)
  @javax.annotation.Nonnull
  private List<MEnum> M = new ArrayList<>();

  /**
   * Gets or Sets T
   */
  @JsonAdapter(TEnum.Adapter.class)
  public enum TEnum {
    NONE(String.valueOf("None")),
    
    CONE(String.valueOf("Cone")),
    
    CUBE(String.valueOf("Cube"));

    private String value;

    TEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TEnum fromValue(String value) {
      for (TEnum b : TEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_T = "T";
  @SerializedName(SERIALIZED_NAME_T)
  @javax.annotation.Nonnull
  private List<TEnum> T = new ArrayList<>();

  public MatchScoreBreakdown2023AllianceAutoCommunity() {
  }

  public MatchScoreBreakdown2023AllianceAutoCommunity B(@javax.annotation.Nonnull List<BEnum> B) {
    
    this.B = B;
    return this;
  }

  public MatchScoreBreakdown2023AllianceAutoCommunity addBItem(BEnum BItem) {
    if (this.B == null) {
      this.B = new ArrayList<>();
    }
    this.B.add(BItem);
    return this;
  }

  /**
   * Get B
   * @return B
   */
  @javax.annotation.Nonnull

  public List<BEnum> getB() {
    return B;
  }


  public void setB(@javax.annotation.Nonnull List<BEnum> B) {
    this.B = B;
  }

  public MatchScoreBreakdown2023AllianceAutoCommunity M(@javax.annotation.Nonnull List<MEnum> M) {
    
    this.M = M;
    return this;
  }

  public MatchScoreBreakdown2023AllianceAutoCommunity addMItem(MEnum MItem) {
    if (this.M == null) {
      this.M = new ArrayList<>();
    }
    this.M.add(MItem);
    return this;
  }

  /**
   * Get M
   * @return M
   */
  @javax.annotation.Nonnull

  public List<MEnum> getM() {
    return M;
  }


  public void setM(@javax.annotation.Nonnull List<MEnum> M) {
    this.M = M;
  }

  public MatchScoreBreakdown2023AllianceAutoCommunity T(@javax.annotation.Nonnull List<TEnum> T) {
    
    this.T = T;
    return this;
  }

  public MatchScoreBreakdown2023AllianceAutoCommunity addTItem(TEnum TItem) {
    if (this.T == null) {
      this.T = new ArrayList<>();
    }
    this.T.add(TItem);
    return this;
  }

  /**
   * Get T
   * @return T
   */
  @javax.annotation.Nonnull

  public List<TEnum> getT() {
    return T;
  }


  public void setT(@javax.annotation.Nonnull List<TEnum> T) {
    this.T = T;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MatchScoreBreakdown2023AllianceAutoCommunity matchScoreBreakdown2023AllianceAutoCommunity = (MatchScoreBreakdown2023AllianceAutoCommunity) o;
    return Objects.equals(this.B, matchScoreBreakdown2023AllianceAutoCommunity.B) &&
        Objects.equals(this.M, matchScoreBreakdown2023AllianceAutoCommunity.M) &&
        Objects.equals(this.T, matchScoreBreakdown2023AllianceAutoCommunity.T);
  }

  @Override
  public int hashCode() {
    return Objects.hash(B, M, T);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MatchScoreBreakdown2023AllianceAutoCommunity {\n");
    sb.append("    B: ").append(toIndentedString(B)).append("\n");
    sb.append("    M: ").append(toIndentedString(M)).append("\n");
    sb.append("    T: ").append(toIndentedString(T)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

