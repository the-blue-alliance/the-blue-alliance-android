/*
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.9.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package thebluealliance.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import thebluealliance.api.model.DistrictList;

/**
 * EventSimple
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-12T10:04:04.013721-06:00[America/Chicago]", comments = "Generator version: 7.10.0")
public class EventSimple {
  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  @javax.annotation.Nonnull
  private String key;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_EVENT_CODE = "event_code";
  @SerializedName(SERIALIZED_NAME_EVENT_CODE)
  @javax.annotation.Nonnull
  private String eventCode;

  public static final String SERIALIZED_NAME_EVENT_TYPE = "event_type";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  @javax.annotation.Nonnull
  private Integer eventType;

  public static final String SERIALIZED_NAME_DISTRICT = "district";
  @SerializedName(SERIALIZED_NAME_DISTRICT)
  @javax.annotation.Nullable
  private DistrictList district;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  @javax.annotation.Nullable
  private String city;

  public static final String SERIALIZED_NAME_STATE_PROV = "state_prov";
  @SerializedName(SERIALIZED_NAME_STATE_PROV)
  @javax.annotation.Nullable
  private String stateProv;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  @javax.annotation.Nullable
  private String country;

  public static final String SERIALIZED_NAME_START_DATE = "start_date";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  @javax.annotation.Nonnull
  private LocalDate startDate;

  public static final String SERIALIZED_NAME_END_DATE = "end_date";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  @javax.annotation.Nonnull
  private LocalDate endDate;

  public static final String SERIALIZED_NAME_YEAR = "year";
  @SerializedName(SERIALIZED_NAME_YEAR)
  @javax.annotation.Nonnull
  private Integer year;

  public EventSimple() {
  }

  public EventSimple key(@javax.annotation.Nonnull String key) {
    
    this.key = key;
    return this;
  }

  /**
   * TBA event key with the format yyyy[EVENT_CODE], where yyyy is the year, and EVENT_CODE is the event code of the event.
   * @return key
   */
  @javax.annotation.Nonnull

  public String getKey() {
    return key;
  }


  public void setKey(@javax.annotation.Nonnull String key) {
    this.key = key;
  }

  public EventSimple name(@javax.annotation.Nonnull String name) {
    
    this.name = name;
    return this;
  }

  /**
   * Official name of event on record either provided by FIRST or organizers of offseason event.
   * @return name
   */
  @javax.annotation.Nonnull

  public String getName() {
    return name;
  }


  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }

  public EventSimple eventCode(@javax.annotation.Nonnull String eventCode) {
    
    this.eventCode = eventCode;
    return this;
  }

  /**
   * Event short code, as provided by FIRST.
   * @return eventCode
   */
  @javax.annotation.Nonnull

  public String getEventCode() {
    return eventCode;
  }


  public void setEventCode(@javax.annotation.Nonnull String eventCode) {
    this.eventCode = eventCode;
  }

  public EventSimple eventType(@javax.annotation.Nonnull Integer eventType) {
    
    this.eventType = eventType;
    return this;
  }

  /**
   * Event Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/event_type.py#L2
   * @return eventType
   */
  @javax.annotation.Nonnull

  public Integer getEventType() {
    return eventType;
  }


  public void setEventType(@javax.annotation.Nonnull Integer eventType) {
    this.eventType = eventType;
  }

  public EventSimple district(@javax.annotation.Nullable DistrictList district) {
    
    this.district = district;
    return this;
  }

  /**
   * Get district
   * @return district
   */
  @javax.annotation.Nullable

  public DistrictList getDistrict() {
    return district;
  }


  public void setDistrict(@javax.annotation.Nullable DistrictList district) {
    this.district = district;
  }

  public EventSimple city(@javax.annotation.Nullable String city) {
    
    this.city = city;
    return this;
  }

  /**
   * City, town, village, etc. the event is located in.
   * @return city
   */
  @javax.annotation.Nullable

  public String getCity() {
    return city;
  }


  public void setCity(@javax.annotation.Nullable String city) {
    this.city = city;
  }

  public EventSimple stateProv(@javax.annotation.Nullable String stateProv) {
    
    this.stateProv = stateProv;
    return this;
  }

  /**
   * State or Province the event is located in.
   * @return stateProv
   */
  @javax.annotation.Nullable

  public String getStateProv() {
    return stateProv;
  }


  public void setStateProv(@javax.annotation.Nullable String stateProv) {
    this.stateProv = stateProv;
  }

  public EventSimple country(@javax.annotation.Nullable String country) {
    
    this.country = country;
    return this;
  }

  /**
   * Country the event is located in.
   * @return country
   */
  @javax.annotation.Nullable

  public String getCountry() {
    return country;
  }


  public void setCountry(@javax.annotation.Nullable String country) {
    this.country = country;
  }

  public EventSimple startDate(@javax.annotation.Nonnull LocalDate startDate) {
    
    this.startDate = startDate;
    return this;
  }

  /**
   * Event start date in &#x60;yyyy-mm-dd&#x60; format.
   * @return startDate
   */
  @javax.annotation.Nonnull

  public LocalDate getStartDate() {
    return startDate;
  }


  public void setStartDate(@javax.annotation.Nonnull LocalDate startDate) {
    this.startDate = startDate;
  }

  public EventSimple endDate(@javax.annotation.Nonnull LocalDate endDate) {
    
    this.endDate = endDate;
    return this;
  }

  /**
   * Event end date in &#x60;yyyy-mm-dd&#x60; format.
   * @return endDate
   */
  @javax.annotation.Nonnull

  public LocalDate getEndDate() {
    return endDate;
  }


  public void setEndDate(@javax.annotation.Nonnull LocalDate endDate) {
    this.endDate = endDate;
  }

  public EventSimple year(@javax.annotation.Nonnull Integer year) {
    
    this.year = year;
    return this;
  }

  /**
   * Year the event data is for.
   * @return year
   */
  @javax.annotation.Nonnull

  public Integer getYear() {
    return year;
  }


  public void setYear(@javax.annotation.Nonnull Integer year) {
    this.year = year;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventSimple eventSimple = (EventSimple) o;
    return Objects.equals(this.key, eventSimple.key) &&
        Objects.equals(this.name, eventSimple.name) &&
        Objects.equals(this.eventCode, eventSimple.eventCode) &&
        Objects.equals(this.eventType, eventSimple.eventType) &&
        Objects.equals(this.district, eventSimple.district) &&
        Objects.equals(this.city, eventSimple.city) &&
        Objects.equals(this.stateProv, eventSimple.stateProv) &&
        Objects.equals(this.country, eventSimple.country) &&
        Objects.equals(this.startDate, eventSimple.startDate) &&
        Objects.equals(this.endDate, eventSimple.endDate) &&
        Objects.equals(this.year, eventSimple.year);
  }

  @Override
  public int hashCode() {
    return Objects.hash(key, name, eventCode, eventType, district, city, stateProv, country, startDate, endDate, year);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventSimple {\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    eventCode: ").append(toIndentedString(eventCode)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    district: ").append(toIndentedString(district)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    stateProv: ").append(toIndentedString(stateProv)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

