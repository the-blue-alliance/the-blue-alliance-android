/*
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.9.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package thebluealliance.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import thebluealliance.api.model.DistrictRankingEventPointsInner;

/**
 * Rank of a team in a district.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-12T10:04:04.013721-06:00[America/Chicago]", comments = "Generator version: 7.10.0")
public class DistrictRanking {
  public static final String SERIALIZED_NAME_TEAM_KEY = "team_key";
  @SerializedName(SERIALIZED_NAME_TEAM_KEY)
  @javax.annotation.Nonnull
  private String teamKey;

  public static final String SERIALIZED_NAME_RANK = "rank";
  @SerializedName(SERIALIZED_NAME_RANK)
  @javax.annotation.Nonnull
  private Integer rank;

  public static final String SERIALIZED_NAME_ROOKIE_BONUS = "rookie_bonus";
  @SerializedName(SERIALIZED_NAME_ROOKIE_BONUS)
  @javax.annotation.Nullable
  private Integer rookieBonus;

  public static final String SERIALIZED_NAME_POINT_TOTAL = "point_total";
  @SerializedName(SERIALIZED_NAME_POINT_TOTAL)
  @javax.annotation.Nonnull
  private Integer pointTotal;

  public static final String SERIALIZED_NAME_EVENT_POINTS = "event_points";
  @SerializedName(SERIALIZED_NAME_EVENT_POINTS)
  @javax.annotation.Nullable
  private List<DistrictRankingEventPointsInner> eventPoints = new ArrayList<>();

  public DistrictRanking() {
  }

  public DistrictRanking teamKey(@javax.annotation.Nonnull String teamKey) {
    
    this.teamKey = teamKey;
    return this;
  }

  /**
   * TBA team key for the team.
   * @return teamKey
   */
  @javax.annotation.Nonnull

  public String getTeamKey() {
    return teamKey;
  }


  public void setTeamKey(@javax.annotation.Nonnull String teamKey) {
    this.teamKey = teamKey;
  }

  public DistrictRanking rank(@javax.annotation.Nonnull Integer rank) {
    
    this.rank = rank;
    return this;
  }

  /**
   * Numerical rank of the team, 1 being top rank.
   * @return rank
   */
  @javax.annotation.Nonnull

  public Integer getRank() {
    return rank;
  }


  public void setRank(@javax.annotation.Nonnull Integer rank) {
    this.rank = rank;
  }

  public DistrictRanking rookieBonus(@javax.annotation.Nullable Integer rookieBonus) {
    
    this.rookieBonus = rookieBonus;
    return this;
  }

  /**
   * Any points added to a team as a result of the rookie bonus.
   * @return rookieBonus
   */
  @javax.annotation.Nullable

  public Integer getRookieBonus() {
    return rookieBonus;
  }


  public void setRookieBonus(@javax.annotation.Nullable Integer rookieBonus) {
    this.rookieBonus = rookieBonus;
  }

  public DistrictRanking pointTotal(@javax.annotation.Nonnull Integer pointTotal) {
    
    this.pointTotal = pointTotal;
    return this;
  }

  /**
   * Total district points for the team.
   * @return pointTotal
   */
  @javax.annotation.Nonnull

  public Integer getPointTotal() {
    return pointTotal;
  }


  public void setPointTotal(@javax.annotation.Nonnull Integer pointTotal) {
    this.pointTotal = pointTotal;
  }

  public DistrictRanking eventPoints(@javax.annotation.Nullable List<DistrictRankingEventPointsInner> eventPoints) {
    
    this.eventPoints = eventPoints;
    return this;
  }

  public DistrictRanking addEventPointsItem(DistrictRankingEventPointsInner eventPointsItem) {
    if (this.eventPoints == null) {
      this.eventPoints = new ArrayList<>();
    }
    this.eventPoints.add(eventPointsItem);
    return this;
  }

  /**
   * List of events that contributed to the point total for the team.
   * @return eventPoints
   */
  @javax.annotation.Nullable

  public List<DistrictRankingEventPointsInner> getEventPoints() {
    return eventPoints;
  }


  public void setEventPoints(@javax.annotation.Nullable List<DistrictRankingEventPointsInner> eventPoints) {
    this.eventPoints = eventPoints;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DistrictRanking districtRanking = (DistrictRanking) o;
    return Objects.equals(this.teamKey, districtRanking.teamKey) &&
        Objects.equals(this.rank, districtRanking.rank) &&
        Objects.equals(this.rookieBonus, districtRanking.rookieBonus) &&
        Objects.equals(this.pointTotal, districtRanking.pointTotal) &&
        Objects.equals(this.eventPoints, districtRanking.eventPoints);
  }

  @Override
  public int hashCode() {
    return Objects.hash(teamKey, rank, rookieBonus, pointTotal, eventPoints);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DistrictRanking {\n");
    sb.append("    teamKey: ").append(toIndentedString(teamKey)).append("\n");
    sb.append("    rank: ").append(toIndentedString(rank)).append("\n");
    sb.append("    rookieBonus: ").append(toIndentedString(rookieBonus)).append("\n");
    sb.append("    pointTotal: ").append(toIndentedString(pointTotal)).append("\n");
    sb.append("    eventPoints: ").append(toIndentedString(eventPoints)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

