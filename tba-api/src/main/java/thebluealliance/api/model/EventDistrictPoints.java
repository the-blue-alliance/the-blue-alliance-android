/*
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.9.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package thebluealliance.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import thebluealliance.api.model.EventDistrictPointsPointsValue;
import thebluealliance.api.model.EventDistrictPointsTiebreakersValue;

/**
 * EventDistrictPoints
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-12T10:04:04.013721-06:00[America/Chicago]", comments = "Generator version: 7.10.0")
public class EventDistrictPoints {
  public static final String SERIALIZED_NAME_POINTS = "points";
  @SerializedName(SERIALIZED_NAME_POINTS)
  @javax.annotation.Nonnull
  private Map<String, EventDistrictPointsPointsValue> points = new HashMap<>();

  public static final String SERIALIZED_NAME_TIEBREAKERS = "tiebreakers";
  @SerializedName(SERIALIZED_NAME_TIEBREAKERS)
  @javax.annotation.Nullable
  private Map<String, EventDistrictPointsTiebreakersValue> tiebreakers = new HashMap<>();

  public EventDistrictPoints() {
  }

  public EventDistrictPoints points(@javax.annotation.Nonnull Map<String, EventDistrictPointsPointsValue> points) {
    
    this.points = points;
    return this;
  }

  public EventDistrictPoints putPointsItem(String key, EventDistrictPointsPointsValue pointsItem) {
    this.points.put(key, pointsItem);
    return this;
  }

  /**
   * Points gained for each team at the event. Stored as a key-value pair with the team key as the key, and an object describing the points as its value.
   * @return points
   */
  @javax.annotation.Nonnull

  public Map<String, EventDistrictPointsPointsValue> getPoints() {
    return points;
  }


  public void setPoints(@javax.annotation.Nonnull Map<String, EventDistrictPointsPointsValue> points) {
    this.points = points;
  }

  public EventDistrictPoints tiebreakers(@javax.annotation.Nullable Map<String, EventDistrictPointsTiebreakersValue> tiebreakers) {
    
    this.tiebreakers = tiebreakers;
    return this;
  }

  public EventDistrictPoints putTiebreakersItem(String key, EventDistrictPointsTiebreakersValue tiebreakersItem) {
    if (this.tiebreakers == null) {
      this.tiebreakers = new HashMap<>();
    }
    this.tiebreakers.put(key, tiebreakersItem);
    return this;
  }

  /**
   * Tiebreaker values for each team at the event. Stored as a key-value pair with the team key as the key, and an object describing the tiebreaker elements as its value.
   * @return tiebreakers
   */
  @javax.annotation.Nullable

  public Map<String, EventDistrictPointsTiebreakersValue> getTiebreakers() {
    return tiebreakers;
  }


  public void setTiebreakers(@javax.annotation.Nullable Map<String, EventDistrictPointsTiebreakersValue> tiebreakers) {
    this.tiebreakers = tiebreakers;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventDistrictPoints eventDistrictPoints = (EventDistrictPoints) o;
    return Objects.equals(this.points, eventDistrictPoints.points) &&
        Objects.equals(this.tiebreakers, eventDistrictPoints.tiebreakers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(points, tiebreakers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventDistrictPoints {\n");
    sb.append("    points: ").append(toIndentedString(points)).append("\n");
    sb.append("    tiebreakers: ").append(toIndentedString(tiebreakers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

