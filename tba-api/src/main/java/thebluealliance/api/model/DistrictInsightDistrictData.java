/*
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.10.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package thebluealliance.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * DistrictInsightDistrictData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-19T09:18:44.421555100-05:00[America/Chicago]", comments = "Generator version: 7.13.0")
public class DistrictInsightDistrictData {
  public static final String SERIALIZED_NAME_YEARLY_ACTIVE_TEAM_COUNT = "yearly_active_team_count";
  @SerializedName(SERIALIZED_NAME_YEARLY_ACTIVE_TEAM_COUNT)
  @javax.annotation.Nonnull
  private Map<String, Integer> yearlyActiveTeamCount = new HashMap<>();

  public static final String SERIALIZED_NAME_YEARLY_EVENT_COUNT = "yearly_event_count";
  @SerializedName(SERIALIZED_NAME_YEARLY_EVENT_COUNT)
  @javax.annotation.Nonnull
  private Map<String, Integer> yearlyEventCount = new HashMap<>();

  public static final String SERIALIZED_NAME_YEARLY_GAINED_TEAMS = "yearly_gained_teams";
  @SerializedName(SERIALIZED_NAME_YEARLY_GAINED_TEAMS)
  @javax.annotation.Nonnull
  private Map<String, List<String>> yearlyGainedTeams = new HashMap<>();

  public static final String SERIALIZED_NAME_YEARLY_LOST_TEAMS = "yearly_lost_teams";
  @SerializedName(SERIALIZED_NAME_YEARLY_LOST_TEAMS)
  @javax.annotation.Nonnull
  private Map<String, List<String>> yearlyLostTeams = new HashMap<>();

  public DistrictInsightDistrictData() {
  }

  public DistrictInsightDistrictData yearlyActiveTeamCount(@javax.annotation.Nonnull Map<String, Integer> yearlyActiveTeamCount) {
    
    this.yearlyActiveTeamCount = yearlyActiveTeamCount;
    return this;
  }

  public DistrictInsightDistrictData putYearlyActiveTeamCountItem(String key, Integer yearlyActiveTeamCountItem) {
    this.yearlyActiveTeamCount.put(key, yearlyActiveTeamCountItem);
    return this;
  }

  /**
   * Map of year to number of active teams
   * @return yearlyActiveTeamCount
   */
  @javax.annotation.Nonnull

  public Map<String, Integer> getYearlyActiveTeamCount() {
    return yearlyActiveTeamCount;
  }


  public void setYearlyActiveTeamCount(@javax.annotation.Nonnull Map<String, Integer> yearlyActiveTeamCount) {
    this.yearlyActiveTeamCount = yearlyActiveTeamCount;
  }

  public DistrictInsightDistrictData yearlyEventCount(@javax.annotation.Nonnull Map<String, Integer> yearlyEventCount) {
    
    this.yearlyEventCount = yearlyEventCount;
    return this;
  }

  public DistrictInsightDistrictData putYearlyEventCountItem(String key, Integer yearlyEventCountItem) {
    this.yearlyEventCount.put(key, yearlyEventCountItem);
    return this;
  }

  /**
   * Map of year to number of events
   * @return yearlyEventCount
   */
  @javax.annotation.Nonnull

  public Map<String, Integer> getYearlyEventCount() {
    return yearlyEventCount;
  }


  public void setYearlyEventCount(@javax.annotation.Nonnull Map<String, Integer> yearlyEventCount) {
    this.yearlyEventCount = yearlyEventCount;
  }

  public DistrictInsightDistrictData yearlyGainedTeams(@javax.annotation.Nonnull Map<String, List<String>> yearlyGainedTeams) {
    
    this.yearlyGainedTeams = yearlyGainedTeams;
    return this;
  }

  public DistrictInsightDistrictData putYearlyGainedTeamsItem(String key, List<String> yearlyGainedTeamsItem) {
    this.yearlyGainedTeams.put(key, yearlyGainedTeamsItem);
    return this;
  }

  /**
   * Map of year to list of team keys gained
   * @return yearlyGainedTeams
   */
  @javax.annotation.Nonnull

  public Map<String, List<String>> getYearlyGainedTeams() {
    return yearlyGainedTeams;
  }


  public void setYearlyGainedTeams(@javax.annotation.Nonnull Map<String, List<String>> yearlyGainedTeams) {
    this.yearlyGainedTeams = yearlyGainedTeams;
  }

  public DistrictInsightDistrictData yearlyLostTeams(@javax.annotation.Nonnull Map<String, List<String>> yearlyLostTeams) {
    
    this.yearlyLostTeams = yearlyLostTeams;
    return this;
  }

  public DistrictInsightDistrictData putYearlyLostTeamsItem(String key, List<String> yearlyLostTeamsItem) {
    this.yearlyLostTeams.put(key, yearlyLostTeamsItem);
    return this;
  }

  /**
   * Map of year to list of team keys lost
   * @return yearlyLostTeams
   */
  @javax.annotation.Nonnull

  public Map<String, List<String>> getYearlyLostTeams() {
    return yearlyLostTeams;
  }


  public void setYearlyLostTeams(@javax.annotation.Nonnull Map<String, List<String>> yearlyLostTeams) {
    this.yearlyLostTeams = yearlyLostTeams;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DistrictInsightDistrictData districtInsightDistrictData = (DistrictInsightDistrictData) o;
    return Objects.equals(this.yearlyActiveTeamCount, districtInsightDistrictData.yearlyActiveTeamCount) &&
        Objects.equals(this.yearlyEventCount, districtInsightDistrictData.yearlyEventCount) &&
        Objects.equals(this.yearlyGainedTeams, districtInsightDistrictData.yearlyGainedTeams) &&
        Objects.equals(this.yearlyLostTeams, districtInsightDistrictData.yearlyLostTeams);
  }

  @Override
  public int hashCode() {
    return Objects.hash(yearlyActiveTeamCount, yearlyEventCount, yearlyGainedTeams, yearlyLostTeams);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DistrictInsightDistrictData {\n");
    sb.append("    yearlyActiveTeamCount: ").append(toIndentedString(yearlyActiveTeamCount)).append("\n");
    sb.append("    yearlyEventCount: ").append(toIndentedString(yearlyEventCount)).append("\n");
    sb.append("    yearlyGainedTeams: ").append(toIndentedString(yearlyGainedTeams)).append("\n");
    sb.append("    yearlyLostTeams: ").append(toIndentedString(yearlyLostTeams)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

