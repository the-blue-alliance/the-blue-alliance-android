/*
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.9.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package thebluealliance.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import thebluealliance.api.model.MatchScoreBreakdown;
import thebluealliance.api.model.MatchSimpleAlliances;
import thebluealliance.api.model.MatchVideosInner;

/**
 * Match
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-12T10:04:04.013721-06:00[America/Chicago]", comments = "Generator version: 7.10.0")
public class Match {
  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  @javax.annotation.Nonnull
  private String key;

  /**
   * The competition level the match was played at.
   */
  @JsonAdapter(CompLevelEnum.Adapter.class)
  public enum CompLevelEnum {
    QM(String.valueOf("qm")),
    
    EF(String.valueOf("ef")),
    
    QF(String.valueOf("qf")),
    
    SF(String.valueOf("sf")),
    
    F(String.valueOf("f"));

    private String value;

    CompLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CompLevelEnum fromValue(String value) {
      for (CompLevelEnum b : CompLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CompLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CompLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CompLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CompLevelEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_COMP_LEVEL = "comp_level";
  @SerializedName(SERIALIZED_NAME_COMP_LEVEL)
  @javax.annotation.Nonnull
  private CompLevelEnum compLevel;

  public static final String SERIALIZED_NAME_SET_NUMBER = "set_number";
  @SerializedName(SERIALIZED_NAME_SET_NUMBER)
  @javax.annotation.Nonnull
  private Integer setNumber;

  public static final String SERIALIZED_NAME_MATCH_NUMBER = "match_number";
  @SerializedName(SERIALIZED_NAME_MATCH_NUMBER)
  @javax.annotation.Nonnull
  private Integer matchNumber;

  public static final String SERIALIZED_NAME_ALLIANCES = "alliances";
  @SerializedName(SERIALIZED_NAME_ALLIANCES)
  @javax.annotation.Nonnull
  private MatchSimpleAlliances alliances;

  /**
   * The color (red/blue) of the winning alliance. Will contain an empty string in the event of no winner, or a tie.
   */
  @JsonAdapter(WinningAllianceEnum.Adapter.class)
  public enum WinningAllianceEnum {
    RED(String.valueOf("red")),
    
    BLUE(String.valueOf("blue")),
    
    EMPTY(String.valueOf(""));

    private String value;

    WinningAllianceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WinningAllianceEnum fromValue(String value) {
      for (WinningAllianceEnum b : WinningAllianceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WinningAllianceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WinningAllianceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WinningAllianceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WinningAllianceEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_WINNING_ALLIANCE = "winning_alliance";
  @SerializedName(SERIALIZED_NAME_WINNING_ALLIANCE)
  @javax.annotation.Nonnull
  private WinningAllianceEnum winningAlliance;

  public static final String SERIALIZED_NAME_EVENT_KEY = "event_key";
  @SerializedName(SERIALIZED_NAME_EVENT_KEY)
  @javax.annotation.Nonnull
  private String eventKey;

  public static final String SERIALIZED_NAME_TIME = "time";
  @SerializedName(SERIALIZED_NAME_TIME)
  @javax.annotation.Nullable
  private Long time;

  public static final String SERIALIZED_NAME_ACTUAL_TIME = "actual_time";
  @SerializedName(SERIALIZED_NAME_ACTUAL_TIME)
  @javax.annotation.Nullable
  private Long actualTime;

  public static final String SERIALIZED_NAME_PREDICTED_TIME = "predicted_time";
  @SerializedName(SERIALIZED_NAME_PREDICTED_TIME)
  @javax.annotation.Nullable
  private Long predictedTime;

  public static final String SERIALIZED_NAME_POST_RESULT_TIME = "post_result_time";
  @SerializedName(SERIALIZED_NAME_POST_RESULT_TIME)
  @javax.annotation.Nullable
  private Long postResultTime;

  public static final String SERIALIZED_NAME_SCORE_BREAKDOWN = "score_breakdown";
  @SerializedName(SERIALIZED_NAME_SCORE_BREAKDOWN)
  @javax.annotation.Nullable
  private MatchScoreBreakdown scoreBreakdown;

  public static final String SERIALIZED_NAME_VIDEOS = "videos";
  @SerializedName(SERIALIZED_NAME_VIDEOS)
  @javax.annotation.Nonnull
  private List<MatchVideosInner> videos = new ArrayList<>();

  public Match() {
  }

  public Match key(@javax.annotation.Nonnull String key) {
    
    this.key = key;
    return this;
  }

  /**
   * TBA match key with the format &#x60;yyyy[EVENT_CODE]_[COMP_LEVEL]m[MATCH_NUMBER]&#x60;, where &#x60;yyyy&#x60; is the year, and &#x60;EVENT_CODE&#x60; is the event code of the event, &#x60;COMP_LEVEL&#x60; is (qm, ef, qf, sf, f), and &#x60;MATCH_NUMBER&#x60; is the match number in the competition level. A set number may be appended to the competition level if more than one match in required per set.
   * @return key
   */
  @javax.annotation.Nonnull

  public String getKey() {
    return key;
  }


  public void setKey(@javax.annotation.Nonnull String key) {
    this.key = key;
  }

  public Match compLevel(@javax.annotation.Nonnull CompLevelEnum compLevel) {
    
    this.compLevel = compLevel;
    return this;
  }

  /**
   * The competition level the match was played at.
   * @return compLevel
   */
  @javax.annotation.Nonnull

  public CompLevelEnum getCompLevel() {
    return compLevel;
  }


  public void setCompLevel(@javax.annotation.Nonnull CompLevelEnum compLevel) {
    this.compLevel = compLevel;
  }

  public Match setNumber(@javax.annotation.Nonnull Integer setNumber) {
    
    this.setNumber = setNumber;
    return this;
  }

  /**
   * The set number in a series of matches where more than one match is required in the match series.
   * @return setNumber
   */
  @javax.annotation.Nonnull

  public Integer getSetNumber() {
    return setNumber;
  }


  public void setSetNumber(@javax.annotation.Nonnull Integer setNumber) {
    this.setNumber = setNumber;
  }

  public Match matchNumber(@javax.annotation.Nonnull Integer matchNumber) {
    
    this.matchNumber = matchNumber;
    return this;
  }

  /**
   * The match number of the match in the competition level.
   * @return matchNumber
   */
  @javax.annotation.Nonnull

  public Integer getMatchNumber() {
    return matchNumber;
  }


  public void setMatchNumber(@javax.annotation.Nonnull Integer matchNumber) {
    this.matchNumber = matchNumber;
  }

  public Match alliances(@javax.annotation.Nonnull MatchSimpleAlliances alliances) {
    
    this.alliances = alliances;
    return this;
  }

  /**
   * Get alliances
   * @return alliances
   */
  @javax.annotation.Nonnull

  public MatchSimpleAlliances getAlliances() {
    return alliances;
  }


  public void setAlliances(@javax.annotation.Nonnull MatchSimpleAlliances alliances) {
    this.alliances = alliances;
  }

  public Match winningAlliance(@javax.annotation.Nonnull WinningAllianceEnum winningAlliance) {
    
    this.winningAlliance = winningAlliance;
    return this;
  }

  /**
   * The color (red/blue) of the winning alliance. Will contain an empty string in the event of no winner, or a tie.
   * @return winningAlliance
   */
  @javax.annotation.Nonnull

  public WinningAllianceEnum getWinningAlliance() {
    return winningAlliance;
  }


  public void setWinningAlliance(@javax.annotation.Nonnull WinningAllianceEnum winningAlliance) {
    this.winningAlliance = winningAlliance;
  }

  public Match eventKey(@javax.annotation.Nonnull String eventKey) {
    
    this.eventKey = eventKey;
    return this;
  }

  /**
   * Event key of the event the match was played at.
   * @return eventKey
   */
  @javax.annotation.Nonnull

  public String getEventKey() {
    return eventKey;
  }


  public void setEventKey(@javax.annotation.Nonnull String eventKey) {
    this.eventKey = eventKey;
  }

  public Match time(@javax.annotation.Nullable Long time) {
    
    this.time = time;
    return this;
  }

  /**
   * UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of the scheduled match time, as taken from the published schedule.
   * @return time
   */
  @javax.annotation.Nullable

  public Long getTime() {
    return time;
  }


  public void setTime(@javax.annotation.Nullable Long time) {
    this.time = time;
  }

  public Match actualTime(@javax.annotation.Nullable Long actualTime) {
    
    this.actualTime = actualTime;
    return this;
  }

  /**
   * UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of actual match start time.
   * @return actualTime
   */
  @javax.annotation.Nullable

  public Long getActualTime() {
    return actualTime;
  }


  public void setActualTime(@javax.annotation.Nullable Long actualTime) {
    this.actualTime = actualTime;
  }

  public Match predictedTime(@javax.annotation.Nullable Long predictedTime) {
    
    this.predictedTime = predictedTime;
    return this;
  }

  /**
   * UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of the TBA predicted match start time.
   * @return predictedTime
   */
  @javax.annotation.Nullable

  public Long getPredictedTime() {
    return predictedTime;
  }


  public void setPredictedTime(@javax.annotation.Nullable Long predictedTime) {
    this.predictedTime = predictedTime;
  }

  public Match postResultTime(@javax.annotation.Nullable Long postResultTime) {
    
    this.postResultTime = postResultTime;
    return this;
  }

  /**
   * UNIX timestamp (seconds since 1-Jan-1970 00:00:00) when the match result was posted.
   * @return postResultTime
   */
  @javax.annotation.Nullable

  public Long getPostResultTime() {
    return postResultTime;
  }


  public void setPostResultTime(@javax.annotation.Nullable Long postResultTime) {
    this.postResultTime = postResultTime;
  }

  public Match scoreBreakdown(@javax.annotation.Nullable MatchScoreBreakdown scoreBreakdown) {
    
    this.scoreBreakdown = scoreBreakdown;
    return this;
  }

  /**
   * Get scoreBreakdown
   * @return scoreBreakdown
   */
  @javax.annotation.Nullable

  public MatchScoreBreakdown getScoreBreakdown() {
    return scoreBreakdown;
  }


  public void setScoreBreakdown(@javax.annotation.Nullable MatchScoreBreakdown scoreBreakdown) {
    this.scoreBreakdown = scoreBreakdown;
  }

  public Match videos(@javax.annotation.Nonnull List<MatchVideosInner> videos) {
    
    this.videos = videos;
    return this;
  }

  public Match addVideosItem(MatchVideosInner videosItem) {
    if (this.videos == null) {
      this.videos = new ArrayList<>();
    }
    this.videos.add(videosItem);
    return this;
  }

  /**
   * Array of video objects associated with this match.
   * @return videos
   */
  @javax.annotation.Nonnull

  public List<MatchVideosInner> getVideos() {
    return videos;
  }


  public void setVideos(@javax.annotation.Nonnull List<MatchVideosInner> videos) {
    this.videos = videos;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Match match = (Match) o;
    return Objects.equals(this.key, match.key) &&
        Objects.equals(this.compLevel, match.compLevel) &&
        Objects.equals(this.setNumber, match.setNumber) &&
        Objects.equals(this.matchNumber, match.matchNumber) &&
        Objects.equals(this.alliances, match.alliances) &&
        Objects.equals(this.winningAlliance, match.winningAlliance) &&
        Objects.equals(this.eventKey, match.eventKey) &&
        Objects.equals(this.time, match.time) &&
        Objects.equals(this.actualTime, match.actualTime) &&
        Objects.equals(this.predictedTime, match.predictedTime) &&
        Objects.equals(this.postResultTime, match.postResultTime) &&
        Objects.equals(this.scoreBreakdown, match.scoreBreakdown) &&
        Objects.equals(this.videos, match.videos);
  }

  @Override
  public int hashCode() {
    return Objects.hash(key, compLevel, setNumber, matchNumber, alliances, winningAlliance, eventKey, time, actualTime, predictedTime, postResultTime, scoreBreakdown, videos);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Match {\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    compLevel: ").append(toIndentedString(compLevel)).append("\n");
    sb.append("    setNumber: ").append(toIndentedString(setNumber)).append("\n");
    sb.append("    matchNumber: ").append(toIndentedString(matchNumber)).append("\n");
    sb.append("    alliances: ").append(toIndentedString(alliances)).append("\n");
    sb.append("    winningAlliance: ").append(toIndentedString(winningAlliance)).append("\n");
    sb.append("    eventKey: ").append(toIndentedString(eventKey)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    actualTime: ").append(toIndentedString(actualTime)).append("\n");
    sb.append("    predictedTime: ").append(toIndentedString(predictedTime)).append("\n");
    sb.append("    postResultTime: ").append(toIndentedString(postResultTime)).append("\n");
    sb.append("    scoreBreakdown: ").append(toIndentedString(scoreBreakdown)).append("\n");
    sb.append("    videos: ").append(toIndentedString(videos)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

