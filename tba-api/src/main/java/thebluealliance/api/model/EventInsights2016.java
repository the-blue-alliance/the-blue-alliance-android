/*
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.9.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package thebluealliance.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * Insights for FIRST Stronghold qualification and elimination matches.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-12T10:04:04.013721-06:00[America/Chicago]", comments = "Generator version: 7.10.0")
public class EventInsights2016 {
  public static final String SERIALIZED_NAME_LOW_BAR = "LowBar";
  @SerializedName(SERIALIZED_NAME_LOW_BAR)
  @javax.annotation.Nonnull
  private List<Float> lowBar = new ArrayList<>();

  public static final String SERIALIZED_NAME_A_CHEVAL_DE_FRISE = "A_ChevalDeFrise";
  @SerializedName(SERIALIZED_NAME_A_CHEVAL_DE_FRISE)
  @javax.annotation.Nonnull
  private List<Float> aChevalDeFrise = new ArrayList<>();

  public static final String SERIALIZED_NAME_A_PORTCULLIS = "A_Portcullis";
  @SerializedName(SERIALIZED_NAME_A_PORTCULLIS)
  @javax.annotation.Nonnull
  private List<Float> aPortcullis = new ArrayList<>();

  public static final String SERIALIZED_NAME_B_RAMPARTS = "B_Ramparts";
  @SerializedName(SERIALIZED_NAME_B_RAMPARTS)
  @javax.annotation.Nonnull
  private List<Float> bRamparts = new ArrayList<>();

  public static final String SERIALIZED_NAME_B_MOAT = "B_Moat";
  @SerializedName(SERIALIZED_NAME_B_MOAT)
  @javax.annotation.Nonnull
  private List<Float> bMoat = new ArrayList<>();

  public static final String SERIALIZED_NAME_C_SALLY_PORT = "C_SallyPort";
  @SerializedName(SERIALIZED_NAME_C_SALLY_PORT)
  @javax.annotation.Nonnull
  private List<Float> cSallyPort = new ArrayList<>();

  public static final String SERIALIZED_NAME_C_DRAWBRIDGE = "C_Drawbridge";
  @SerializedName(SERIALIZED_NAME_C_DRAWBRIDGE)
  @javax.annotation.Nonnull
  private List<Float> cDrawbridge = new ArrayList<>();

  public static final String SERIALIZED_NAME_D_ROUGH_TERRAIN = "D_RoughTerrain";
  @SerializedName(SERIALIZED_NAME_D_ROUGH_TERRAIN)
  @javax.annotation.Nonnull
  private List<Float> dRoughTerrain = new ArrayList<>();

  public static final String SERIALIZED_NAME_D_ROCK_WALL = "D_RockWall";
  @SerializedName(SERIALIZED_NAME_D_ROCK_WALL)
  @javax.annotation.Nonnull
  private List<Float> dRockWall = new ArrayList<>();

  public static final String SERIALIZED_NAME_AVERAGE_HIGH_GOALS = "average_high_goals";
  @SerializedName(SERIALIZED_NAME_AVERAGE_HIGH_GOALS)
  @javax.annotation.Nonnull
  private Float averageHighGoals;

  public static final String SERIALIZED_NAME_AVERAGE_LOW_GOALS = "average_low_goals";
  @SerializedName(SERIALIZED_NAME_AVERAGE_LOW_GOALS)
  @javax.annotation.Nonnull
  private Float averageLowGoals;

  public static final String SERIALIZED_NAME_BREACHES = "breaches";
  @SerializedName(SERIALIZED_NAME_BREACHES)
  @javax.annotation.Nonnull
  private List<Float> breaches = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCALES = "scales";
  @SerializedName(SERIALIZED_NAME_SCALES)
  @javax.annotation.Nonnull
  private List<Float> scales = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHALLENGES = "challenges";
  @SerializedName(SERIALIZED_NAME_CHALLENGES)
  @javax.annotation.Nonnull
  private List<Float> challenges = new ArrayList<>();

  public static final String SERIALIZED_NAME_CAPTURES = "captures";
  @SerializedName(SERIALIZED_NAME_CAPTURES)
  @javax.annotation.Nonnull
  private List<Float> captures = new ArrayList<>();

  public static final String SERIALIZED_NAME_AVERAGE_WIN_SCORE = "average_win_score";
  @SerializedName(SERIALIZED_NAME_AVERAGE_WIN_SCORE)
  @javax.annotation.Nonnull
  private Float averageWinScore;

  public static final String SERIALIZED_NAME_AVERAGE_WIN_MARGIN = "average_win_margin";
  @SerializedName(SERIALIZED_NAME_AVERAGE_WIN_MARGIN)
  @javax.annotation.Nonnull
  private Float averageWinMargin;

  public static final String SERIALIZED_NAME_AVERAGE_SCORE = "average_score";
  @SerializedName(SERIALIZED_NAME_AVERAGE_SCORE)
  @javax.annotation.Nonnull
  private Float averageScore;

  public static final String SERIALIZED_NAME_AVERAGE_AUTO_SCORE = "average_auto_score";
  @SerializedName(SERIALIZED_NAME_AVERAGE_AUTO_SCORE)
  @javax.annotation.Nonnull
  private Float averageAutoScore;

  public static final String SERIALIZED_NAME_AVERAGE_CROSSING_SCORE = "average_crossing_score";
  @SerializedName(SERIALIZED_NAME_AVERAGE_CROSSING_SCORE)
  @javax.annotation.Nonnull
  private Float averageCrossingScore;

  public static final String SERIALIZED_NAME_AVERAGE_BOULDER_SCORE = "average_boulder_score";
  @SerializedName(SERIALIZED_NAME_AVERAGE_BOULDER_SCORE)
  @javax.annotation.Nonnull
  private Float averageBoulderScore;

  public static final String SERIALIZED_NAME_AVERAGE_TOWER_SCORE = "average_tower_score";
  @SerializedName(SERIALIZED_NAME_AVERAGE_TOWER_SCORE)
  @javax.annotation.Nonnull
  private Float averageTowerScore;

  public static final String SERIALIZED_NAME_AVERAGE_FOUL_SCORE = "average_foul_score";
  @SerializedName(SERIALIZED_NAME_AVERAGE_FOUL_SCORE)
  @javax.annotation.Nonnull
  private Float averageFoulScore;

  public static final String SERIALIZED_NAME_HIGH_SCORE = "high_score";
  @SerializedName(SERIALIZED_NAME_HIGH_SCORE)
  @javax.annotation.Nonnull
  private List<String> highScore = new ArrayList<>();

  public EventInsights2016() {
  }

  public EventInsights2016 lowBar(@javax.annotation.Nonnull List<Float> lowBar) {
    
    this.lowBar = lowBar;
    return this;
  }

  public EventInsights2016 addLowBarItem(Float lowBarItem) {
    if (this.lowBar == null) {
      this.lowBar = new ArrayList<>();
    }
    this.lowBar.add(lowBarItem);
    return this;
  }

  /**
   * For the Low Bar - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
   * @return lowBar
   */
  @javax.annotation.Nonnull

  public List<Float> getLowBar() {
    return lowBar;
  }


  public void setLowBar(@javax.annotation.Nonnull List<Float> lowBar) {
    this.lowBar = lowBar;
  }

  public EventInsights2016 aChevalDeFrise(@javax.annotation.Nonnull List<Float> aChevalDeFrise) {
    
    this.aChevalDeFrise = aChevalDeFrise;
    return this;
  }

  public EventInsights2016 addAChevalDeFriseItem(Float aChevalDeFriseItem) {
    if (this.aChevalDeFrise == null) {
      this.aChevalDeFrise = new ArrayList<>();
    }
    this.aChevalDeFrise.add(aChevalDeFriseItem);
    return this;
  }

  /**
   * For the Cheval De Frise - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
   * @return aChevalDeFrise
   */
  @javax.annotation.Nonnull

  public List<Float> getaChevalDeFrise() {
    return aChevalDeFrise;
  }


  public void setaChevalDeFrise(@javax.annotation.Nonnull List<Float> aChevalDeFrise) {
    this.aChevalDeFrise = aChevalDeFrise;
  }

  public EventInsights2016 aPortcullis(@javax.annotation.Nonnull List<Float> aPortcullis) {
    
    this.aPortcullis = aPortcullis;
    return this;
  }

  public EventInsights2016 addAPortcullisItem(Float aPortcullisItem) {
    if (this.aPortcullis == null) {
      this.aPortcullis = new ArrayList<>();
    }
    this.aPortcullis.add(aPortcullisItem);
    return this;
  }

  /**
   * For the Portcullis - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
   * @return aPortcullis
   */
  @javax.annotation.Nonnull

  public List<Float> getaPortcullis() {
    return aPortcullis;
  }


  public void setaPortcullis(@javax.annotation.Nonnull List<Float> aPortcullis) {
    this.aPortcullis = aPortcullis;
  }

  public EventInsights2016 bRamparts(@javax.annotation.Nonnull List<Float> bRamparts) {
    
    this.bRamparts = bRamparts;
    return this;
  }

  public EventInsights2016 addBRampartsItem(Float bRampartsItem) {
    if (this.bRamparts == null) {
      this.bRamparts = new ArrayList<>();
    }
    this.bRamparts.add(bRampartsItem);
    return this;
  }

  /**
   * For the Ramparts - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
   * @return bRamparts
   */
  @javax.annotation.Nonnull

  public List<Float> getbRamparts() {
    return bRamparts;
  }


  public void setbRamparts(@javax.annotation.Nonnull List<Float> bRamparts) {
    this.bRamparts = bRamparts;
  }

  public EventInsights2016 bMoat(@javax.annotation.Nonnull List<Float> bMoat) {
    
    this.bMoat = bMoat;
    return this;
  }

  public EventInsights2016 addBMoatItem(Float bMoatItem) {
    if (this.bMoat == null) {
      this.bMoat = new ArrayList<>();
    }
    this.bMoat.add(bMoatItem);
    return this;
  }

  /**
   * For the Moat - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
   * @return bMoat
   */
  @javax.annotation.Nonnull

  public List<Float> getbMoat() {
    return bMoat;
  }


  public void setbMoat(@javax.annotation.Nonnull List<Float> bMoat) {
    this.bMoat = bMoat;
  }

  public EventInsights2016 cSallyPort(@javax.annotation.Nonnull List<Float> cSallyPort) {
    
    this.cSallyPort = cSallyPort;
    return this;
  }

  public EventInsights2016 addCSallyPortItem(Float cSallyPortItem) {
    if (this.cSallyPort == null) {
      this.cSallyPort = new ArrayList<>();
    }
    this.cSallyPort.add(cSallyPortItem);
    return this;
  }

  /**
   * For the Sally Port - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
   * @return cSallyPort
   */
  @javax.annotation.Nonnull

  public List<Float> getcSallyPort() {
    return cSallyPort;
  }


  public void setcSallyPort(@javax.annotation.Nonnull List<Float> cSallyPort) {
    this.cSallyPort = cSallyPort;
  }

  public EventInsights2016 cDrawbridge(@javax.annotation.Nonnull List<Float> cDrawbridge) {
    
    this.cDrawbridge = cDrawbridge;
    return this;
  }

  public EventInsights2016 addCDrawbridgeItem(Float cDrawbridgeItem) {
    if (this.cDrawbridge == null) {
      this.cDrawbridge = new ArrayList<>();
    }
    this.cDrawbridge.add(cDrawbridgeItem);
    return this;
  }

  /**
   * For the Drawbridge - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
   * @return cDrawbridge
   */
  @javax.annotation.Nonnull

  public List<Float> getcDrawbridge() {
    return cDrawbridge;
  }


  public void setcDrawbridge(@javax.annotation.Nonnull List<Float> cDrawbridge) {
    this.cDrawbridge = cDrawbridge;
  }

  public EventInsights2016 dRoughTerrain(@javax.annotation.Nonnull List<Float> dRoughTerrain) {
    
    this.dRoughTerrain = dRoughTerrain;
    return this;
  }

  public EventInsights2016 addDRoughTerrainItem(Float dRoughTerrainItem) {
    if (this.dRoughTerrain == null) {
      this.dRoughTerrain = new ArrayList<>();
    }
    this.dRoughTerrain.add(dRoughTerrainItem);
    return this;
  }

  /**
   * For the Rough Terrain - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
   * @return dRoughTerrain
   */
  @javax.annotation.Nonnull

  public List<Float> getdRoughTerrain() {
    return dRoughTerrain;
  }


  public void setdRoughTerrain(@javax.annotation.Nonnull List<Float> dRoughTerrain) {
    this.dRoughTerrain = dRoughTerrain;
  }

  public EventInsights2016 dRockWall(@javax.annotation.Nonnull List<Float> dRockWall) {
    
    this.dRockWall = dRockWall;
    return this;
  }

  public EventInsights2016 addDRockWallItem(Float dRockWallItem) {
    if (this.dRockWall == null) {
      this.dRockWall = new ArrayList<>();
    }
    this.dRockWall.add(dRockWallItem);
    return this;
  }

  /**
   * For the Rock Wall - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
   * @return dRockWall
   */
  @javax.annotation.Nonnull

  public List<Float> getdRockWall() {
    return dRockWall;
  }


  public void setdRockWall(@javax.annotation.Nonnull List<Float> dRockWall) {
    this.dRockWall = dRockWall;
  }

  public EventInsights2016 averageHighGoals(@javax.annotation.Nonnull Float averageHighGoals) {
    
    this.averageHighGoals = averageHighGoals;
    return this;
  }

  /**
   * Average number of high goals scored.
   * @return averageHighGoals
   */
  @javax.annotation.Nonnull

  public Float getAverageHighGoals() {
    return averageHighGoals;
  }


  public void setAverageHighGoals(@javax.annotation.Nonnull Float averageHighGoals) {
    this.averageHighGoals = averageHighGoals;
  }

  public EventInsights2016 averageLowGoals(@javax.annotation.Nonnull Float averageLowGoals) {
    
    this.averageLowGoals = averageLowGoals;
    return this;
  }

  /**
   * Average number of low goals scored.
   * @return averageLowGoals
   */
  @javax.annotation.Nonnull

  public Float getAverageLowGoals() {
    return averageLowGoals;
  }


  public void setAverageLowGoals(@javax.annotation.Nonnull Float averageLowGoals) {
    this.averageLowGoals = averageLowGoals;
  }

  public EventInsights2016 breaches(@javax.annotation.Nonnull List<Float> breaches) {
    
    this.breaches = breaches;
    return this;
  }

  public EventInsights2016 addBreachesItem(Float breachesItem) {
    if (this.breaches == null) {
      this.breaches = new ArrayList<>();
    }
    this.breaches.add(breachesItem);
    return this;
  }

  /**
   * An array with three values, number of times breached, number of opportunities to breach, and percentage.
   * @return breaches
   */
  @javax.annotation.Nonnull

  public List<Float> getBreaches() {
    return breaches;
  }


  public void setBreaches(@javax.annotation.Nonnull List<Float> breaches) {
    this.breaches = breaches;
  }

  public EventInsights2016 scales(@javax.annotation.Nonnull List<Float> scales) {
    
    this.scales = scales;
    return this;
  }

  public EventInsights2016 addScalesItem(Float scalesItem) {
    if (this.scales == null) {
      this.scales = new ArrayList<>();
    }
    this.scales.add(scalesItem);
    return this;
  }

  /**
   * An array with three values, number of times scaled, number of opportunities to scale, and percentage.
   * @return scales
   */
  @javax.annotation.Nonnull

  public List<Float> getScales() {
    return scales;
  }


  public void setScales(@javax.annotation.Nonnull List<Float> scales) {
    this.scales = scales;
  }

  public EventInsights2016 challenges(@javax.annotation.Nonnull List<Float> challenges) {
    
    this.challenges = challenges;
    return this;
  }

  public EventInsights2016 addChallengesItem(Float challengesItem) {
    if (this.challenges == null) {
      this.challenges = new ArrayList<>();
    }
    this.challenges.add(challengesItem);
    return this;
  }

  /**
   * An array with three values, number of times challenged, number of opportunities to challenge, and percentage.
   * @return challenges
   */
  @javax.annotation.Nonnull

  public List<Float> getChallenges() {
    return challenges;
  }


  public void setChallenges(@javax.annotation.Nonnull List<Float> challenges) {
    this.challenges = challenges;
  }

  public EventInsights2016 captures(@javax.annotation.Nonnull List<Float> captures) {
    
    this.captures = captures;
    return this;
  }

  public EventInsights2016 addCapturesItem(Float capturesItem) {
    if (this.captures == null) {
      this.captures = new ArrayList<>();
    }
    this.captures.add(capturesItem);
    return this;
  }

  /**
   * An array with three values, number of times captured, number of opportunities to capture, and percentage.
   * @return captures
   */
  @javax.annotation.Nonnull

  public List<Float> getCaptures() {
    return captures;
  }


  public void setCaptures(@javax.annotation.Nonnull List<Float> captures) {
    this.captures = captures;
  }

  public EventInsights2016 averageWinScore(@javax.annotation.Nonnull Float averageWinScore) {
    
    this.averageWinScore = averageWinScore;
    return this;
  }

  /**
   * Average winning score.
   * @return averageWinScore
   */
  @javax.annotation.Nonnull

  public Float getAverageWinScore() {
    return averageWinScore;
  }


  public void setAverageWinScore(@javax.annotation.Nonnull Float averageWinScore) {
    this.averageWinScore = averageWinScore;
  }

  public EventInsights2016 averageWinMargin(@javax.annotation.Nonnull Float averageWinMargin) {
    
    this.averageWinMargin = averageWinMargin;
    return this;
  }

  /**
   * Average margin of victory.
   * @return averageWinMargin
   */
  @javax.annotation.Nonnull

  public Float getAverageWinMargin() {
    return averageWinMargin;
  }


  public void setAverageWinMargin(@javax.annotation.Nonnull Float averageWinMargin) {
    this.averageWinMargin = averageWinMargin;
  }

  public EventInsights2016 averageScore(@javax.annotation.Nonnull Float averageScore) {
    
    this.averageScore = averageScore;
    return this;
  }

  /**
   * Average total score.
   * @return averageScore
   */
  @javax.annotation.Nonnull

  public Float getAverageScore() {
    return averageScore;
  }


  public void setAverageScore(@javax.annotation.Nonnull Float averageScore) {
    this.averageScore = averageScore;
  }

  public EventInsights2016 averageAutoScore(@javax.annotation.Nonnull Float averageAutoScore) {
    
    this.averageAutoScore = averageAutoScore;
    return this;
  }

  /**
   * Average autonomous score.
   * @return averageAutoScore
   */
  @javax.annotation.Nonnull

  public Float getAverageAutoScore() {
    return averageAutoScore;
  }


  public void setAverageAutoScore(@javax.annotation.Nonnull Float averageAutoScore) {
    this.averageAutoScore = averageAutoScore;
  }

  public EventInsights2016 averageCrossingScore(@javax.annotation.Nonnull Float averageCrossingScore) {
    
    this.averageCrossingScore = averageCrossingScore;
    return this;
  }

  /**
   * Average crossing score.
   * @return averageCrossingScore
   */
  @javax.annotation.Nonnull

  public Float getAverageCrossingScore() {
    return averageCrossingScore;
  }


  public void setAverageCrossingScore(@javax.annotation.Nonnull Float averageCrossingScore) {
    this.averageCrossingScore = averageCrossingScore;
  }

  public EventInsights2016 averageBoulderScore(@javax.annotation.Nonnull Float averageBoulderScore) {
    
    this.averageBoulderScore = averageBoulderScore;
    return this;
  }

  /**
   * Average boulder score.
   * @return averageBoulderScore
   */
  @javax.annotation.Nonnull

  public Float getAverageBoulderScore() {
    return averageBoulderScore;
  }


  public void setAverageBoulderScore(@javax.annotation.Nonnull Float averageBoulderScore) {
    this.averageBoulderScore = averageBoulderScore;
  }

  public EventInsights2016 averageTowerScore(@javax.annotation.Nonnull Float averageTowerScore) {
    
    this.averageTowerScore = averageTowerScore;
    return this;
  }

  /**
   * Average tower score.
   * @return averageTowerScore
   */
  @javax.annotation.Nonnull

  public Float getAverageTowerScore() {
    return averageTowerScore;
  }


  public void setAverageTowerScore(@javax.annotation.Nonnull Float averageTowerScore) {
    this.averageTowerScore = averageTowerScore;
  }

  public EventInsights2016 averageFoulScore(@javax.annotation.Nonnull Float averageFoulScore) {
    
    this.averageFoulScore = averageFoulScore;
    return this;
  }

  /**
   * Average foul score.
   * @return averageFoulScore
   */
  @javax.annotation.Nonnull

  public Float getAverageFoulScore() {
    return averageFoulScore;
  }


  public void setAverageFoulScore(@javax.annotation.Nonnull Float averageFoulScore) {
    this.averageFoulScore = averageFoulScore;
  }

  public EventInsights2016 highScore(@javax.annotation.Nonnull List<String> highScore) {
    
    this.highScore = highScore;
    return this;
  }

  public EventInsights2016 addHighScoreItem(String highScoreItem) {
    if (this.highScore == null) {
      this.highScore = new ArrayList<>();
    }
    this.highScore.add(highScoreItem);
    return this;
  }

  /**
   * An array with three values, high score, match key from the match with the high score, and the name of the match.
   * @return highScore
   */
  @javax.annotation.Nonnull

  public List<String> getHighScore() {
    return highScore;
  }


  public void setHighScore(@javax.annotation.Nonnull List<String> highScore) {
    this.highScore = highScore;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventInsights2016 eventInsights2016 = (EventInsights2016) o;
    return Objects.equals(this.lowBar, eventInsights2016.lowBar) &&
        Objects.equals(this.aChevalDeFrise, eventInsights2016.aChevalDeFrise) &&
        Objects.equals(this.aPortcullis, eventInsights2016.aPortcullis) &&
        Objects.equals(this.bRamparts, eventInsights2016.bRamparts) &&
        Objects.equals(this.bMoat, eventInsights2016.bMoat) &&
        Objects.equals(this.cSallyPort, eventInsights2016.cSallyPort) &&
        Objects.equals(this.cDrawbridge, eventInsights2016.cDrawbridge) &&
        Objects.equals(this.dRoughTerrain, eventInsights2016.dRoughTerrain) &&
        Objects.equals(this.dRockWall, eventInsights2016.dRockWall) &&
        Objects.equals(this.averageHighGoals, eventInsights2016.averageHighGoals) &&
        Objects.equals(this.averageLowGoals, eventInsights2016.averageLowGoals) &&
        Objects.equals(this.breaches, eventInsights2016.breaches) &&
        Objects.equals(this.scales, eventInsights2016.scales) &&
        Objects.equals(this.challenges, eventInsights2016.challenges) &&
        Objects.equals(this.captures, eventInsights2016.captures) &&
        Objects.equals(this.averageWinScore, eventInsights2016.averageWinScore) &&
        Objects.equals(this.averageWinMargin, eventInsights2016.averageWinMargin) &&
        Objects.equals(this.averageScore, eventInsights2016.averageScore) &&
        Objects.equals(this.averageAutoScore, eventInsights2016.averageAutoScore) &&
        Objects.equals(this.averageCrossingScore, eventInsights2016.averageCrossingScore) &&
        Objects.equals(this.averageBoulderScore, eventInsights2016.averageBoulderScore) &&
        Objects.equals(this.averageTowerScore, eventInsights2016.averageTowerScore) &&
        Objects.equals(this.averageFoulScore, eventInsights2016.averageFoulScore) &&
        Objects.equals(this.highScore, eventInsights2016.highScore);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lowBar, aChevalDeFrise, aPortcullis, bRamparts, bMoat, cSallyPort, cDrawbridge, dRoughTerrain, dRockWall, averageHighGoals, averageLowGoals, breaches, scales, challenges, captures, averageWinScore, averageWinMargin, averageScore, averageAutoScore, averageCrossingScore, averageBoulderScore, averageTowerScore, averageFoulScore, highScore);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventInsights2016 {\n");
    sb.append("    lowBar: ").append(toIndentedString(lowBar)).append("\n");
    sb.append("    aChevalDeFrise: ").append(toIndentedString(aChevalDeFrise)).append("\n");
    sb.append("    aPortcullis: ").append(toIndentedString(aPortcullis)).append("\n");
    sb.append("    bRamparts: ").append(toIndentedString(bRamparts)).append("\n");
    sb.append("    bMoat: ").append(toIndentedString(bMoat)).append("\n");
    sb.append("    cSallyPort: ").append(toIndentedString(cSallyPort)).append("\n");
    sb.append("    cDrawbridge: ").append(toIndentedString(cDrawbridge)).append("\n");
    sb.append("    dRoughTerrain: ").append(toIndentedString(dRoughTerrain)).append("\n");
    sb.append("    dRockWall: ").append(toIndentedString(dRockWall)).append("\n");
    sb.append("    averageHighGoals: ").append(toIndentedString(averageHighGoals)).append("\n");
    sb.append("    averageLowGoals: ").append(toIndentedString(averageLowGoals)).append("\n");
    sb.append("    breaches: ").append(toIndentedString(breaches)).append("\n");
    sb.append("    scales: ").append(toIndentedString(scales)).append("\n");
    sb.append("    challenges: ").append(toIndentedString(challenges)).append("\n");
    sb.append("    captures: ").append(toIndentedString(captures)).append("\n");
    sb.append("    averageWinScore: ").append(toIndentedString(averageWinScore)).append("\n");
    sb.append("    averageWinMargin: ").append(toIndentedString(averageWinMargin)).append("\n");
    sb.append("    averageScore: ").append(toIndentedString(averageScore)).append("\n");
    sb.append("    averageAutoScore: ").append(toIndentedString(averageAutoScore)).append("\n");
    sb.append("    averageCrossingScore: ").append(toIndentedString(averageCrossingScore)).append("\n");
    sb.append("    averageBoulderScore: ").append(toIndentedString(averageBoulderScore)).append("\n");
    sb.append("    averageTowerScore: ").append(toIndentedString(averageTowerScore)).append("\n");
    sb.append("    averageFoulScore: ").append(toIndentedString(averageFoulScore)).append("\n");
    sb.append("    highScore: ").append(toIndentedString(highScore)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

