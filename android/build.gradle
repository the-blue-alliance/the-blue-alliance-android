apply plugin: 'android'

def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()

android {
    compileSdkVersion 19
    buildToolsVersion '19.1.0'

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 19
        versionCode 14
        versionName "1.3"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    signingConfigs {
        release {
            storeFile file("somefile.jks")
            storePassword "notRealPassword"
            keyAlias "notRealAlias"
            keyPassword "notRealPassword"
        }

        buildTypes {
            debug {
                versionNameSuffix "/#" + gitSha
                applicationIdSuffix ".development"
                applicationVariants.all { variant ->
                    def file = variant.outputFile
                    variant.outputFile = new File(file.parent, "tba-android-v" + defaultConfig.versionName + "#"+gitSha+"-debug.apk")
                }
            }

            release {
                signingConfig signingConfigs.release
                runProguard true
                zipAlign true
                proguardFiles 'proguard-rules.txt'
                applicationVariants.all { variant ->
                    def file = variant.outputFile
                    variant.outputFile = new File(file.parent, "tba-android-v" + defaultConfig.versionName + ".apk")
                }
            }
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
}

task loadProperties << {
    // add in signing keys from local.properties
    def config = new Properties()
    def propFile = file("../local.properties")
    System.out.println("Loading property file: " + propFile.absolutePath)
    if (propFile.canRead()) {
        config.load(new FileInputStream(propFile))
        android.signingConfigs.release.storeFile = file(config["release.key"])
        android.signingConfigs.release.storePassword = config["release.key.password"]
        android.signingConfigs.release.keyAlias = config["release.key.alias"]
        android.signingConfigs.release.keyPassword = config["release.key.aliasPass"]
    }

    // check to make sure that an analytics key is defined
    def tba_config = new Properties();
    def tba_propFile = file("src/main/assets/tba.properties")
    tba_config.load(new FileInputStream(tba_propFile));
    if(!tba_config.containsKey("analytics.id")){
        throw new InvalidUserDataException("You need to have analytics key defined in tba.properties to build a release apk");
    }
    System.out.println("Building with analytics key: "+tba_config["analytics.id"]);
}

tasks.whenTaskAdded { theTask ->
    if (theTask.name.equals("packageRelease") || theTask.name.equals("packageBeta")) {
        theTask.dependsOn "loadProperties"
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile([group: 'com.google.api-client', name: 'google-api-client-android', version: '1.19.0'])
    compile 'com.google.http-client:google-http-client-gson:1.19.0' exclude module: 'httpclient'
    compile 'com.android.support:support-v13:19.+'
    compile 'com.astuetz:pagerslidingtabstrip:1.0.1dev@aar'
    compile 'com.android.support:support-v4:19.+'
    compile 'com.google.code.gson:gson:2.2.4'
    compile 'org.apache.commons:commons-lang3:3.0'
    compile 'org.apache.commons:commons-io:1.3.2'
    compile 'com.squareup.picasso:picasso:2.2.0'
    compile 'me.xuender:unidecode:0.0.+'
    compile 'com.google.android.gms:play-services:5.0.+'
    compile files('libs/tbaMobile-v4-1.19.0-SNAPSHOT.jar')
}
