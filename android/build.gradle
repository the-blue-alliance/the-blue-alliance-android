apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'gitsemver'
apply plugin: 'com.github.triplet.play'

apply from: "../code_coverage.gradle"

// dependency checker plugin
// run ./gradlew dependencyUpdates to generate report
apply plugin: 'com.github.ben-manes.versions'

apply from: 'versioning.gradle'
apply from: 'build.workaround-missing-resource.gradle'

// Fix for https://github.com/evant/gradle-retrolambda/issues/105
// Without this, the build fails on CI for some reason
retrolambda {
    jvmArgs '-noverify'
}

version semverVersion()
def (major, minor, patch, versionNum, gitTag, gitHash, commitsFromTag, repoDirty) =
buildVersionCode()

tasks.withType(Test) {
    testLogging {
        events "passed", "skipped", "failed"
        quiet.events = ["passed", "failed"]
    }
}

project.afterEvaluate {
    def generateReleasePlayResources = project.tasks.getByName("generateProdReleasePlayResources")
    generateReleasePlayResources.dependsOn loadProperties
}

android {
    compileSdkVersion 23
    buildToolsVersion '23.0.2'

    signingConfigs {
        release {
            storeFile file("somefile.jks")
            storePassword "notRealPassword"
            keyAlias "notRealAlias"
            keyPassword "notRealPassword"
        }

        productFlavors {
            dev {
                // dev utilizes minSDKVersion = 21 to allow the Android gradle plugin
                // to pre-dex each module and produce an APK that can be tested on
                // Android Lollipop without time consuming dex merging processes
                minSdkVersion 21
                multiDexEnabled true

            }
            prod {
                // to install a debug app with minSdkVersion = 16, run ./gradlew installProdDebug
                // see http://developer.android.com/tools/building/multidex.html#dev-build
                minSdkVersion 16
                multiDexEnabled true
            }
        }

        buildTypes {
            debug {
                applicationIdSuffix ".development"
                testCoverageEnabled = true
                manifestPlaceholders = [gcmPermissionRequired: ""] // "" => let GCMBroadcastReceiver accept Intents from 'adb shell am broadcast'
            }

            debugProguard {
                applicationIdSuffix ".development"
                testCoverageEnabled = true
                manifestPlaceholders = [gcmPermissionRequired: ""] // "" => let GCMBroadcastReceiver accept Intents from 'adb shell am broadcast'
                minifyEnabled true
                zipAlignEnabled true
                proguardFiles 'proguard-rules.txt'
                testProguardFile 'proguard-rules.txt'
            }

            // run 'gradlew assembleDebugBlue' to do a debug signed build without using debug resources
            // the apk will be in android/build/apk and you can install it by running
            // 'adb install -r <file name>'
            debugBlue {
                signingConfig signingConfigs.debug
                applicationIdSuffix ".development"
                manifestPlaceholders = [gcmPermissionRequired: ""]
            }

            release {
                manifestPlaceholders = [gcmPermissionRequired: "com.google.android.c2dm.permission.SEND"]
                signingConfig signingConfigs.release
                minifyEnabled true
                zipAlignEnabled true
                proguardFiles 'proguard-rules.txt'
            }
        }
    }

    defaultConfig {
        applicationId "com.thebluealliance.androidclient"
        minSdkVersion 16
        targetSdkVersion 22
        versionCode versionNum
        versionName version.toString()
        multiDexEnabled true

        // Needed for support lib 23.2.0+ on pre-L devices
        vectorDrawables.useSupportLibrary = true

        // Add specific versioning things to BuildConfig
        buildConfigField "int", "MAJOR_VERSION", "$major"
        buildConfigField "int", "MINOR_VERSION", "$minor"
        buildConfigField "int", "PATCH_VERSION", "$patch"
        buildConfigField "String", "GIT_TAG", "\"$gitTag\""
        buildConfigField "String", "GIT_HASH", "\"$gitHash\""
        buildConfigField "int", "COMMITS_FROM_TAG", "$commitsFromTag"
        buildConfigField "boolean", "REPO_DIRTY", "$repoDirty"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        // Don't throw dreaded stub exceptions
        unitTests.returnDefaultValues = true
    }

    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def apkName = "tba-android-";
            apkName += "v" + version.tagName;
            apkName += "-" + variant.buildType.name + ".apk";
            output.outputFile = file("$project.buildDir/apk/" + apkName)
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE-FIREBASE.txt'
        exclude 'META-INF/NOTICE'
    }

    lintOptions {
        abortOnError false
    }

    buildTypes {
        debugBlue {
            debuggable true
        }
    }

    dexOptions {
        incremental true
        javaMaxHeapSize "2048M"
        preDexLibraries = preDexEnabled && !travisBuild
    }

}

play {
    serviceAccountEmail = 'some-email-address'
    pk12File = file("somefile.p12")
    track = 'beta'
}

println "Version: " + android.defaultConfig.versionName + "/" + android.defaultConfig.versionCode

task loadProperties << {
    // add in signing keys from local.properties
    def config = new Properties()
    def propFile = file("../local.properties")
    System.out.println("Loading property file: " + propFile.absolutePath)
    if (propFile.canRead()) {
        config.load(new FileInputStream(propFile))
        android.signingConfigs.release.storeFile = file(config["release.key"])
        android.signingConfigs.release.storePassword = config["release.key.password"]
        android.signingConfigs.release.keyAlias = config["release.key.alias"]
        android.signingConfigs.release.keyPassword = config["release.key.aliasPass"]

        play.serviceAccountEmail = config['play.release.serviceEmail']
        play.pk12File = file(config['play.release.keyFile'])
    }

    // check to make sure that an analytics key is defined
    def tba_config = new Properties();
    def tba_propFile = file("src/main/assets/tba.properties")
    tba_config.load(new FileInputStream(tba_propFile));
    if (!tba_config.containsKey("analytics.id")) {
        throw new InvalidUserDataException("You need to have analytics key defined in tba.properties to build a release apk");
    }
    System.out.println("Building with analytics key: " + tba_config["analytics.id"]);
}

tasks.whenTaskAdded { theTask ->
    if (theTask.name.equals("packageDevRelease")
            || theTask.name.equals("packageProdRelease")
            || theTask.name.equals("publishProdRelease")
            || theTask.name.equals("bootstrapProdReleasePlayResources")
            || theTask.name.equals("publishListingProdRelease")
            || theTask.name.equals("publishApkProdRelease")) {
        theTask.dependsOn "loadProperties"
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
    maven {
        url "http://github.com/wada811/Android-Material-Design-Colors/raw/master/repository/"
    }
}

ext {
    supportLibVersion = '23.2.1'
    playServicesVersion = '8.4.0'
}

dependencies {

    // Google Cloud Endpoints Library
    compile ([group: 'com.google.api-client', name: 'google-api-client-android', version: googleApiClientVersion])
    compile ([group: 'com.google.http-client', name: 'google-http-client-gson', version: googleApiClientVersion])
    compile project(':tbaMobile')
    compile project(':libImgur')

    // Android support libraries
    compile "com.android.support:support-v13:${supportLibVersion}"
    compile "com.android.support:cardview-v7:${supportLibVersion}"
    compile "com.android.support:support-v4:${supportLibVersion}"
    compile "com.android.support:appcompat-v7:${supportLibVersion}"
    compile "com.android.support:gridlayout-v7:${supportLibVersion}"
    compile 'com.android.support:multidex:1.0.1'
    compile "com.android.support:design:${supportLibVersion}"

    // Play Services Libraries
    // See http://developer.android.com/google/play-services/setup.html
    compile "com.google.android.gms:play-services-base:${playServicesVersion}"
    compile "com.google.android.gms:play-services-plus:${playServicesVersion}"
    compile "com.google.android.gms:play-services-analytics:${playServicesVersion}"
    compile "com.google.android.gms:play-services-gcm:${playServicesVersion}"

    // Square Libraries
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile "com.squareup.retrofit2:retrofit:${retrofitVersion}"
    compile "com.squareup.retrofit2:adapter-rxjava:${retrofitVersion}"
    compile 'com.squareup.okhttp3:okhttp:3.2.0'

    compile 'com.google.dagger:dagger:2.0.2'
    apt 'com.google.dagger:dagger-compiler:2.0.2'

    // Other third party libraries
    compile "com.google.code.gson:gson:${gsonVersion}"
    compile 'me.xuender:unidecode:0.0.7'
    compile 'org.greenrobot:eventbus:3.0.0'
    compile 'de.hdodenhof:circleimageview:1.3.0'
    compile 'com.facebook.stetho:stetho:1.3.1'
    compile 'com.facebook.stetho:stetho-okhttp3:1.3.1'
    compile 'com.firebase:firebase-client-android:2.5.2'
    compile "io.reactivex:rxandroid:${rxJavaVersion}"
    compile 'io.reactivex:rxjava-math:1.0.0'
    compile 'me.relex:circleindicator:1.1.5@aar'
    compile 'com.jakewharton:butterknife:7.0.1'
    compile 'io.nlopez.smartadapters:library:1.3.0'
    compile 'com.wada811:android-material-design-colors:2.0.0'
    compile 'com.thebluealliance:spectrum:0.2.1'
    compile 'javax.annotation:javax.annotation-api:1.2'

    // testing
    testCompile 'org.robolectric:robolectric:3.0'
    testCompile "org.robolectric:shadows-support-v4:3.0"
    testCompile "org.robolectric:shadows-multidex:3.0"
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.0.31-beta'
    testApt 'com.google.dagger:dagger-compiler:2.0.1'
}
