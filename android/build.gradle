apply plugin: 'com.android.application'

def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
def gitBranch = 'git rev-parse --abbrev-ref HEAD'.execute([], project.rootDir).text.trim()

android {
    compileSdkVersion 21
    buildToolsVersion '21.1.2'

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 21
        versionCode 41
        versionName "2.1.13"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    signingConfigs {
        release {
            storeFile file("somefile.jks")
            storePassword "notRealPassword"
            keyAlias "notRealAlias"
            keyPassword "notRealPassword"
        }

        buildTypes {
            debug {
                versionNameSuffix "/"+gitBranch+"/" + gitSha
                applicationIdSuffix ".development"
            }

            // run 'gradlew assembleDebugBlue' to do a debug signed build without using debug resources
            // the apk will be in android/build/apk and you can install it by running
            // 'adb install -r <file name>'
            debugBlue {
                signingConfig signingConfigs.debug
                versionNameSuffix "/"+gitBranch+"/" + gitSha
                applicationIdSuffix ".development"
            }

            release {
                versionNameSuffix "/"+gitBranch
                signingConfig signingConfigs.release
                minifyEnabled true
                zipAlignEnabled true
                proguardFiles 'proguard-rules.txt'
            }
        }
    }

    android.applicationVariants.all { variant ->
        println "*********" + variant.description + "**********";
        variant.outputs.each { output ->
            def apkName = "tba-android-";
            apkName += "v" + android.defaultConfig.versionName;
            apkName += "-" + variant.buildType.name + ".apk";
            println "*********" + "$project.buildDir/apk/" + apkName + "**********";
            output.outputFile = file("$project.buildDir/apk/" + apkName)
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    lintOptions {
        abortOnError false
    }

    buildTypes {
        debugBlue {
            debuggable true
        }
    }
}

apply plugin: 'android-unit-test'

task loadProperties << {
    // add in signing keys from local.properties
    def config = new Properties()
    def propFile = file("../local.properties")
    System.out.println("Loading property file: " + propFile.absolutePath)
    if (propFile.canRead()) {
        config.load(new FileInputStream(propFile))
        android.signingConfigs.release.storeFile = file(config["release.key"])
        android.signingConfigs.release.storePassword = config["release.key.password"]
        android.signingConfigs.release.keyAlias = config["release.key.alias"]
        android.signingConfigs.release.keyPassword = config["release.key.aliasPass"]
    }

    // check to make sure that an analytics key is defined
    def tba_config = new Properties();
    def tba_propFile = file("src/main/assets/tba.properties")
    tba_config.load(new FileInputStream(tba_propFile));
    if (!tba_config.containsKey("analytics.id")) {
        throw new InvalidUserDataException("You need to have analytics key defined in tba.properties to build a release apk");
    }
    System.out.println("Building with analytics key: " + tba_config["analytics.id"]);
}

tasks.whenTaskAdded { theTask ->
    if (theTask.name.equals("packageRelease") || theTask.name.equals("packageBeta")) {
        theTask.dependsOn "loadProperties"
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
    maven { 
        url "https://oss.sonatype.org/content/repositories/snapshots" 
    }
}

afterEvaluate {
    tasks.findByName("assembleDebug").dependsOn("testDebugClasses")
}

dependencies {
    
    // compile fileTree(dir: 'libs', include: ['*.jar'])
    compile([group: 'com.google.api-client', name: 'google-api-client-android', version: '1.19.0'])
    compile 'com.google.http-client:google-http-client-gson:1.19.0' exclude module: 'httpclient'
    compile files('libs/tbaMobile-v9-1.19.0-SNAPSHOT.jar')
    compile 'com.android.support:support-v13:21.0.0'
    compile 'com.android.support:cardview-v7:21.0.0'
    compile 'com.android.support:support-v4:21.0.3'
    compile 'com.android.support:appcompat-v7:21.0.3'
    compile 'com.google.code.gson:gson:2.3'
    compile 'org.apache.commons:commons-lang3:3.0'
    compile 'org.apache.commons:commons-io:1.3.2'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'me.xuender:unidecode:0.0.7'
    compile 'com.google.android.gms:play-services-base:6.5.87'
    compile 'com.google.android.gms:play-services-plus:6.5.87'
    compile 'de.greenrobot:eventbus:2.4.0'
    compile 'com.melnykov:floatingactionbutton:1.0.7'
    compile 'de.hdodenhof:circleimageview:1.2.0'
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'io.reactivex:rxandroid:0.24.0'
    compile 'com.facebook.stetho:stetho:1.0.0'
    compile 'com.facebook.stetho:stetho-okhttp:1.0.0'
    compile 'com.squareup.okhttp:okhttp:2.3.0'

    // testing
    testCompile 'org.robolectric:robolectric:3.0-SNAPSHOT'
    testCompile 'junit:junit:4.12'
}
