plugins {
    id "com.github.plnice.canidropjetifier" version "0.4"
    id 'com.github.triplet.play' version '3.7.0'
}

apply plugin: 'com.android.application'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'checkstyle'
apply plugin: 'gitsemver'
apply plugin: 'com.google.firebase.firebase-perf'
apply plugin: 'com.facebook.testing.screenshot'
apply plugin: 'dagger.hilt.android.plugin'

// dependency checker plugin
// run ./gradlew dependencyUpdates to generate report
apply plugin: 'com.github.ben-manes.versions'

apply from: 'versioning.gradle'
apply from :'robolectric-hermetic.gradle'

version semverVersion(null)
def (major, minor, patch, versionNum, gitTag, gitHash, commitsFromTag, repoDirty) =
buildVersionCode()

tasks.withType(Test) {
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        quiet.events = ["passed", "skipped"]
    }
}

def localProps = new Properties()
def localPropFile = file("../local.properties")
if (localPropFile.exists()) {
    System.out.println("Loading property file: " + localPropFile.absolutePath)
    localProps.load(new FileInputStream(localPropFile))
} else {
    System.out.println("Falling back to default stub properties")
}

android {
    compileSdkVersion 33

    signingConfigs {
        release {
            storeFile file(localProps.getProperty("release.key", "somefile.jks"))
            storePassword localProps.getProperty("release.key.password", "notRealPassword")
            keyAlias localProps.getProperty("release.key.alias", "notRealAlias")
            keyPassword localProps.getProperty("release.key.aliasPass", "notRealPassword")
        }

        buildTypes {
            debug {
                applicationIdSuffix ".development"
                testCoverageEnabled true
                manifestPlaceholders = [gcmPermissionRequired: ""] // "" => let GCMBroadcastReceiver accept Intents from 'adb shell am broadcast'
            }

            debugProguard {
                applicationIdSuffix ".development"
                testCoverageEnabled true
                minifyEnabled true
                zipAlignEnabled true
                proguardFiles 'proguard-rules.txt'
                testProguardFile 'proguard-rules.txt'
                manifestPlaceholders = [gcmPermissionRequired: ""] // "" => let GCMBroadcastReceiver accept Intents from 'adb shell am broadcast'
            }

            // run 'gradlew assembleDebugBlue' to do a debug signed build without using debug resources
            // the apk will be in android/build/apk and you can install it by running
            // 'adb install -r <file name>'
            debugBlue {
                signingConfig signingConfigs.debug
                applicationIdSuffix ".development"
                manifestPlaceholders = [gcmPermissionRequired: ""]
            }

            release {
                signingConfig signingConfigs.release
                minifyEnabled true
                zipAlignEnabled true
                proguardFiles 'proguard-rules.txt'
                manifestPlaceholders = [gcmPermissionRequired: "com.google.android.c2dm.permission.SEND"]
            }
        }
    }

    defaultConfig {
        applicationId "com.thebluealliance.androidclient"
        minSdkVersion 19
        targetSdkVersion 31
        versionCode versionNum
        versionName version.toString()
        multiDexEnabled true

        testInstrumentationRunner "com.thebluealliance.androidclient.testing.TbaInstrumentationRunner"

        // Needed for support lib 23.2.0+ on pre-L devices
        vectorDrawables.useSupportLibrary = true

        // Add specific versioning things to BuildConfig
        buildConfigField "int", "MAJOR_VERSION", "$major"
        buildConfigField "int", "MINOR_VERSION", "$minor"
        buildConfigField "int", "PATCH_VERSION", "$patch"
        buildConfigField "String", "GIT_TAG", "\"$gitTag\""
        buildConfigField "String", "GIT_HASH", "\"$gitHash\""
        buildConfigField "int", "COMMITS_FROM_TAG", "$commitsFromTag"
        buildConfigField "boolean", "REPO_DIRTY", "$repoDirty"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        // Don't throw dreaded stub exceptions
        unitTests.returnDefaultValues = true
        unitTests.includeAndroidResources = true
        unitTests.all {
            // This is needed for robolectric - see
            // https://github.com/robolectric/robolectric-gradle-plugin/issues/144
            jvmArgs '-noverify'
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def apkName = "tba-android-";
            apkName += "v" + version.tagName;
            apkName += "-" + variant.buildType.name + ".apk";
            output.outputFileName = apkName
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE-FIREBASE.txt'
        exclude 'META-INF/NOTICE'
    }

    lintOptions {
        abortOnError false
    }

    buildTypes {
        debugBlue {
            debuggable true
        }
        debugProguard {
            debuggable true
        }
    }

    dexOptions {
        javaMaxHeapSize "2048M"
        preDexLibraries = preDexEnabled && !travisBuild
    }

    useLibrary 'android.test.runner'
    useLibrary 'android.test.base'
    useLibrary 'android.test.mock'
}

play {
    serviceAccountCredentials = file(localProps.getProperty('play.release.credentialFile', 'somefile.json'))
    track = 'beta'
}

println "Version: " + android.defaultConfig.versionName + "/" + android.defaultConfig.versionCode

task updateScreenshotDirs {
    doLast {
        def codeNameOut = new ByteArrayOutputStream()
        exec {
            commandLine 'adb', 'shell', 'getprop', 'ro.product.name'
            standardOutput codeNameOut
        }

        def sdkOut = new ByteArrayOutputStream()
        exec {
            commandLine 'adb', 'shell', 'getprop', 'ro.build.version.sdk'
            standardOutput sdkOut
        }
        def deviceName = codeNameOut.toString().trim()
        def deviceSdk = sdkOut.toString().trim()
        def outputDir = project.screenshots.recordDir + "/" + deviceName + "_api" + deviceSdk
        project.screenshots.recordDir = outputDir
        System.out.println("New screenshot output dierctory: " + outputDir)
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
    maven {
        url "https://github.com/wada811/Android-Material-Design-Colors/raw/master/repository/"
    }
}

task checkstyle(type: Checkstyle) {
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    // empty classpath
    classpath = files()
}

dependencies {
    implementation project(':libTba')
    implementation project(':libImgur')
    implementation project(':spectrum')

    // Android support libraries
    implementation 'androidx.legacy:legacy-support-v13:1.0.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'androidx.gridlayout:gridlayout:1.0.0'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.preference:preference:1.2.0'
    implementation 'com.google.android.flexbox:flexbox:3.0.0'
    implementation 'androidx.viewpager2:viewpager2:1.0.0'
    implementation 'com.google.android.material:material:1.6.0-alpha02'
    implementation "androidx.work:work-runtime:$workManagerVersion"
    androidTestImplementation "androidx.work:work-testing:$workManagerVersion"
    testImplementation "androidx.work:work-testing:$workManagerVersion"

    // Play Services Libraries
    // See http://developer.android.com/google/play-services/setup.html
    implementation 'com.google.guava:guava:24.1-jre'
//    implementation "com.google.firebase:firebase-bom:31.2.3"
    implementation "com.google.android.gms:play-services-base:18.2.0"
    implementation "com.google.android.gms:play-services-analytics:18.0.2"
    implementation "com.google.firebase:firebase-messaging:23.1.2"
    implementation "com.google.android.gms:play-services-auth:20.4.1"
    implementation "com.google.android.gms:play-services-flags:18.0.1"
    implementation "com.google.android.gms:play-services-stats:17.0.3"
    implementation "com.google.firebase:firebase-core:21.1.1"
    implementation "com.google.firebase:firebase-auth:21.1.0"
    implementation "com.google.firebase:firebase-config:21.2.1"
    implementation 'com.google.firebase:firebase-perf:20.3.1'
    implementation 'com.google.firebase:firebase-analytics:21.2.0'
    implementation 'com.google.guava:listenablefuture:9999.0-empty-to-avoid-conflict-with-guava'

    // Square Libraries
    implementation 'com.squareup.picasso:picasso:2.5.2'
    implementation "com.squareup.retrofit2:retrofit:${retrofitVersion}"
    implementation "com.squareup.retrofit2:adapter-rxjava:${retrofitVersion}"
    implementation 'com.squareup.okhttp3:okhttp:3.12.1'

    implementation 'com.google.firebase:firebase-crashlytics:18.3.5'
    implementation 'com.google.firebase:firebase-analytics:21.2.0'
    implementation "com.google.dagger:dagger:${daggerVersion}"
    implementation "com.google.dagger:hilt-android:${daggerVersion}"
    annotationProcessor "com.google.dagger:dagger-compiler:${daggerVersion}"
    annotationProcessor "com.google.dagger:hilt-compiler:${daggerVersion}"
    androidTestImplementation  "com.google.dagger:hilt-android-testing:${daggerVersion}"
    androidTestAnnotationProcessor "com.google.dagger:hilt-compiler:${daggerVersion}"
    testImplementation "com.google.dagger:hilt-android-testing:${daggerVersion}"
    testAnnotationProcessor "com.google.dagger:hilt-compiler:${daggerVersion}"
    implementation 'androidx.hilt:hilt-work:1.0.0'
    annotationProcessor 'androidx.hilt:hilt-compiler:1.0.0'

    // Other third party libraries
    implementation "com.google.code.gson:gson:${gsonVersion}"
    implementation 'me.xuender:unidecode:0.0.7'
    implementation 'org.greenrobot:eventbus:3.1.1'
    implementation 'de.hdodenhof:circleimageview:2.1.0'
    implementation 'com.facebook.stetho:stetho:1.5.1'
    implementation 'com.facebook.stetho:stetho-okhttp3:1.5.1'
    implementation 'com.firebase:firebase-client-android:2.5.2'
    implementation "io.reactivex:rxandroid:${rxAndroidVersion}"
    implementation "io.reactivex:rxjava:${rxJavaVersion}"
    implementation 'io.reactivex:rxjava-math:1.0.0'
    implementation 'me.relex:circleindicator:1.2.1@aar'
    implementation 'com.jakewharton:butterknife:10.1.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.1'
    implementation 'io.nlopez.smartadapters:library:1.3.1'
    implementation 'com.wada811:android-material-design-colors:3.0.0'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation "com.github.permissions-dispatcher:permissionsdispatcher:${permissionDispatcherVersion}"
    annotationProcessor "com.github.permissions-dispatcher:permissionsdispatcher-processor:${permissionDispatcherVersion}"

    // testing
    testImplementation 'androidx.test:core:1.4.0'
    testImplementation 'androidx.test:runner:1.4.0'
    testImplementation 'androidx.test:rules:1.4.0'
    testImplementation 'androidx.test.ext:junit:1.1.3'
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "org.robolectric:robolectric:${robolectricVersion}"
    testImplementation "org.robolectric:shadows-multidex:${robolectricVersion}"
    testAnnotationProcessor "com.google.dagger:dagger-compiler:${daggerVersion}"

    // instrumentation
    androidTestImplementation 'androidx.annotation:annotation:1.6.0'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test:rules:1.5.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'com.google.code.findbugs:jsr305:3.0.2'

    // Leak Canary
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.8.1'
}

apply plugin: 'com.google.gms.google-services'
