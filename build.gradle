// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "http://dl.bintray.com/palantir/releases"
        }
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            url 'https://maven.fabric.io/public'
        }
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.3'
        classpath 'com.google.gms:google-services:4.3.3'
        classpath 'io.fabric.tools:gradle:1.31.2'
        classpath 'com.google.firebase:perf-plugin:1.3.1'

        // dependency analysis
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.27.0'

        // code coverage testing
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2'

        // versioning
        classpath 'com.palantir:gradle-gitsemver:0.6.0'

        // auto-push releases
        classpath 'com.github.triplet.gradle:play-publisher:1.1.5'

        // Automated Screenshot Testing
        classpath 'com.facebook.testing.screenshot:plugin:0.5.0'
    }
}

allprojects {
    repositories {
        jcenter()
        mavenCentral()
        google()
        maven { url 'https://jitpack.io' }
    }

    tasks.withType(JavaCompile) {
        sourceCompatibility = "1.8"
        targetCompatibility = "1.8"
    }

    ext {
        playServicesVersion = '16.0.1'
        firebaseVersion = '16.0.6'
        crashlyticsVersion = '2.10.1'
        googleApiClientVersion = '1.21.0'
        mockitoVersion = '2.27.0'
        retrofitVersion = '2.5.0'
        rxJavaVersion = '1.2.7'
        rxAndroidVersion = '1.2.1'
        gsonVersion = '2.8.5'
        daggerVersion = '2.22.1'
        robolectricVersion = '4.3.1'
        permissionDispatcherVersion = '2.2.0'

        travisBuild = System.getenv("TRAVIS") == "true"
        // allows for -Dpre-dex=false to be set
        preDexEnabled = "true".equals(System.getProperty("pre-dex", "true"))
    }
}

if (System.env.TRAVIS == 'true') {
    allprojects {
        tasks.withType(Test) {
            // containers (currently) have 2 dedicated cores and 4GB of memory
            maxParallelForks = 2
            minHeapSize = '128m'
            maxHeapSize = '768m'
            forkEvery = 100   // helps when tests leak memory
            afterSuite {
                System.out.print('.')
                System.out.flush()
            }
        }
    }
}

if (System.env.robolectric_offline == 'true') {
    allprojects {
        tasks.withType(Test) {
            systemProperty 'robolectric.offline', true
            systemProperty 'robolectric.dependency.dir', './build/output/libs/'
            systemProperty 'robolectric.logging.enabled', true
        }
    }
}

